name: CI-CD

on: [push, pull_request]

jobs:

  ci:
    # Set up OS
    runs-on: ubuntu-latest

    # Define job steps
    steps:
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.3.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Set up caching so that dependencies are only installed if they change
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry/virtualenvs
          ~/.cache/pypoetry/cache
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install package with dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run tests
      run: poetry run pytest tests/ --cov=src/ --cov-report=xml

    - name: Use Codecov to track coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true

    # Check code style only on push to pub
    - name: Check code style
      if: github.event_name == 'push' && github.ref == 'refs/heads/pub'
      run: poetry run black --check src/ tests/

    # Build docs only on push to pub
    - name: Build documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/pub'
      run: poetry run sphinx-build -b html docs/ docs/_build/

    # Commit the _build directory to the pub branch
    - name: Commit documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/pub'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git checkout pub
        git add docs/_build
        git commit -m "Update documentation"
        git push

  cd:
    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job on push to pub
    if: github.event_name == 'push' && github.ref == 'refs/heads/pub'

    # Set up OS
    runs-on: ubuntu-latest

    # Define job steps
    steps:
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.3.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Set up caching so that dependencies are only installed if they change
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry/virtualenvs
          ~/.cache/pypoetry/cache
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install package with dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Use PSR to prepare release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        poetry run semantic-release publish

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Test install from TestPyPi
      run:
        pip install 
          --index-url https://test.pypi.org/simple/ 
          --extra-index-url https://pypi.org/simple 
          pycounts_k108

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_TOKEN }}
      